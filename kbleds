#!/usr/bin/python2

# kbleds - command line interface for controlling keyboard LEDs.
#
# Copyright (C) 2014-2018 Antti Kervinen <antti.kervinen@gmail.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1
# of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free
# Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA

"""kbleds - control keyboard leds

Usage: kbleds [options]

Options:
  --help          print help

  -i, --input=DEV use USB input device

  -t, --tty=DEV   use TTY device

  -h, --human-readable
                  print current state of leds in human readable form.
                  (works for TTY devices)

  -l, --leds=LEDS set the state of some or all leds.
                  LEDS is a string [s|S][n|N][c|C]:
                    s - scroll lock off
                    S - scroll lock on
                    n - num lock off
                    N - num lock on
                    c - caps lock off
                    C - caps lock on
                  or an integer with a bit for each led:
                  scroll lock (LSB), num lock, caps lock.

  -w, --wait=SEC  wait SEC seconds before next option

  --loop          loop -l and -w options for ever.

Examples:

  Light up scroll lock LED:
  sudo kbleds -i /dev/input/by-id/usb-My_USB_Keyboard-kbd -l S

  Light show:
  sudo kbleds -i ... -lncS -w.3 -lnCs -w.1 -lNcs -w.3 -lnCs -w.1 --loop
"""

import getopt
import glob
import sys
import time

import kbleds

def error(msg):
    sys.stderr.write("kbleds: %s\n" % (msg,))
    sys.exit(1)

if __name__ == "__main__":
    opt_print_state = True
    opt_human_readable = False
    opt_new_state = None
    opt_numlock = None
    opt_capslock = None
    opt_scrolllock = None
    opt_input_dev = None
    opt_tty_dev = None
    opt_cmds = []
    opt_loop = None
    leds = []

    try:
        opts, remainder = getopt.getopt(
            sys.argv[1:],
            "hl:o:i:t:w:",
            ["help", "human-readable", "leds=",
             "input=", "tty=", "wait=", "loop"])
    except getopt.GetoptError, e:
        error(e)

    for opt, arg in opts:
        if opt in ["--help"]:
            print __doc__
            sys.exit(0)
        elif opt in ["-i", "--input"]:
            leds.append(kbleds.Leds(input_device=arg))
        elif opt in ["-t", "--tty"]:
            leds.append(kbleds.Leds(tty_device=arg))
        elif opt in ["-h", "--human-readable"]:
            opt_print_state= True
            opt_human_readable = True
        elif opt in ["-l", "--leds"]:
            if not leds:
                for input_kbd in glob.glob("/dev/input/by-id/*event-kbd"):
                    leds.append(kbleds.Leds(input_device=input_kbd))
            if not leds:
                error('keyboard devices not found, use -i INPUT_DEV or -t TTY_DEV')
            opt_print_state = False
            try:
                opt_new_state = int(arg)
                opt_cmds.append(lambda: [l.set_state(opt_new_state) for l in leds])
            except ValueError:
                if "n" in arg:
                    opt_cmds.append(lambda: [l.set_num(0) for l in leds])
                if "N" in arg:
                    opt_cmds.append(lambda: [l.set_num(1) for l in leds])
                if "s" in arg:
                    opt_cmds.append(lambda: [l.set_scroll(0) for l in leds])
                if "S" in arg:
                    opt_cmds.append(lambda: [l.set_scroll(1) for l in leds])
                if "c" in arg:
                    opt_cmds.append(lambda: [l.set_caps(0) for l in leds])
                if "C" in arg:
                    opt_cmds.append(lambda: [l.set_caps(1) for l in leds])
        elif opt in ["-w", "--wait"]:
            opt_cmds.append(
                eval("lambda: time.sleep(%f)" % (float(arg),)))
        elif opt in ["--loop"]:
            opt_loop = True

    if opt_print_state:
        state = leds.state()
        if opt_human_readable:
            str_state = (
                "sS"[(state & kbleds.LED_SCR) >> kbleds.LED_SCR_BIT] +
                "nN"[(state & kbleds.LED_NUM) >> kbleds.LED_NUM_BIT] +
                "cC"[(state & kbleds.LED_NUM) >> kbleds.LED_NUM_BIT])
        else:
            str_state = str(state)
        sys.stdout.write("%s\n" % (str_state,))

    if opt_loop:
        while True:
            for c in opt_cmds:
                c()
    else:
        for c in opt_cmds:
            c()
